* Auto package update
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :defer nil
    :ensure t
    :custom
    (auto-package-update-delete-old-versions t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe))
#+END_SRC
* Diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC
* Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :init
    (which-key-mode))
#+END_SRC
* Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . 'swiper))
#+END_SRC
* Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :defer nil
    :custom
    (evil-want-keybinding nil)
    (evil-want-C-u-scroll t)
    (evil-auto-indent nil)
    :config
    (evil-mode 1))
#+END_SRC
* Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :diminish beacon-mode
    :init
    (beacon-mode 1))
#+END_SRC
* Ido
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :init
    (ido-mode 1)
    :custom
    (ido-enable-flex-matching nil)
    (ido-create-new-buffer 'always)
    (ido-everywhere t))

  (use-package ido-vertical-mode
    :ensure t
    :custom
    (ido-vertical-define-keys 'C-n-C-p-up-and-down)
    :init
    (ido-vertical-mode 1))
#+END_SRC
* Async
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init
    (dired-async-mode 1))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC
